import{_ as e,c as s,o as t,ae as i}from"./chunks/framework.Dq7KSw7C.js";const u=JSON.parse('{"title":"Building custom features","description":"","frontmatter":{},"headers":[],"relativePath":"guides/building-custom-features.md","filePath":"guides/building-custom-features.md"}'),n={name:"guides/building-custom-features.md"};function o(l,a,p,h,r,d){return t(),s("div",null,a[0]||(a[0]=[i('<h1 id="building-custom-features" tabindex="-1">Building custom features <a class="header-anchor" href="#building-custom-features" aria-label="Permalink to &quot;Building custom features&quot;">​</a></h1><p>Let&#39;s now finish building our app, by implementing those features that are unique to it and are not covered in any of the modules.</p><h3 id="scaffold-your-zomes" tabindex="-1">Scaffold your zomes <a class="header-anchor" href="#scaffold-your-zomes" aria-label="Permalink to &quot;Scaffold your zomes&quot;">​</a></h3><p>In holochain, each DNA is composed out of multiple <a href="https://developer.holochain.org/build/zomes/" target="_blank" rel="noreferrer">zomes</a>. Each zome defines:</p><ul><li>Entry types: the data types that exist in your app.</li><li>Collections of entries, eg. to get all entries of a particular type that exist in the network.</li><li>Link types: links go from a particular entry to another.</li><li>API calls: the functions that the frontend is able to call to read or write data from the network.</li></ul><p>First, for each of your DNAs, think which zomes it needs on top of the ones that you imported with the p2p Shipyard modules.</p><p>To create zomes, go into the app&#39;s folder and run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scaffold</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zome</span></span></code></pre></div><p>and follow its instructions. This will generate both backend and frontend code.</p><p>Then, design which entry and link types will each zome have.</p><p>Create entry types with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scaffold</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entry-type</span></span></code></pre></div><p>Create collections with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scaffold</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> collection</span></span></code></pre></div><p>Usually you&#39;ll want one of the generated collection components imported and rendered as the main entry point component of your app.</p><p>Lastly, create any link types that you&#39;d need with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scaffold</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link-type</span></span></code></pre></div><p>Good job! You now have a great starting point of generated code for your zome.</p><p>Now it&#39;s up to you to take it on and finish its building.</p><p>You can run this command to see how your app looks like.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Panxt" id="tab-RemXqir" checked><label data-title="npm" for="tab-RemXqir">npm</label><input type="radio" name="group-Panxt" id="tab-EMxqGAk"><label data-title="yarn" for="tab-EMxqGAk">yarn</label><input type="radio" name="group-Panxt" id="tab-Vz1OV63"><label data-title="pnpm" for="tab-Vz1OV63">pnpm</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div></div></div><p>Have fun coding!</p><div class="note custom-block github-alert"><p class="custom-block-title">Holochain Developer Training</p><p>Curious to learn how to build holochain apps? Check out our <a href="https://darksoil.studio/hc-dev-training/" target="_blank" rel="noreferrer">Holochain Developer Training</a>!</p></div><hr><p>When your app is ready, come back to <a href="/p2p-shipyard/guides/distribution.html">distribution</a> to learn how to ship it to your users.</p>',25)]))}const k=e(n,[["render",o]]);export{u as __pageData,k as default};
